{"remainingRequest":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/src/views/curso/Tema3.vue?vue&type=template&id=0a3faaf0&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/src/views/curso/Tema3.vue","mtime":1736118184541},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}