{"remainingRequest":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/src/views/curso/Tema1.vue?vue&type=template&id=633839c2&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/src/views/curso/Tema1.vue","mtime":1736118184541},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Algoritmico/U3_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6dGl0dWxvPSInVW5pZGFkIDMuIERpc2XDsW8gZSBpbXBsZW1lbnRhY2nDs24gZGUgYWxnb3JpdG1vcyciIDpzdWJUaXR1bG89IicxLiBDb25jZXB0b3MgZ2VuZXJhbGVzIGVuIGVsIGRpc2XDsW8gZGUgYWxnb3JpdG1vcyBlZmljaWVudGVzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5weC00LnB4LW1kLTUucHQtNC5wdC1tZC01LnBiLTAub3ZlcmZsb3ctaGlkZGVuCgogICAgLnJvdy5tYi00CiAgICAgIC5jb2wtMTIuY29sLXhsLTcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIHAubWItNCBBbnRlcyBkZSBjb21lbnphciBjb24gZWwgZGVzYXJyb2xsbyBkZSBlc3RlIHRlbWEsIGVzIGltcG9ydGFudGUgcXVlIHJlcGFzZSBsb3MgY29uY2VwdG9zIGdlbmVyYWxlcyBkZSBhbGdvcml0bW9zLCBhc8OtIHBvZHLDoSBjb21wcmVuZGVyIGNvbiBtYXlvciBncmFkbyBkZSBwcmVjaXNpw7NuIGNhZGEgdW5vIGRlIGxvcyBlamVtcGxvcyBhcXXDrSB1dGlsaXphZG9zLCBhZGVtw6FzIGRlIHByb3BvbmVyIHNvbHVjaW9uZXMgZGUgbWVqb3JhIHBhcmEgY2FkYSBjYXNvLiAKICAgICAgICAuZC1mbGV4LmFsaWduLWl0ZW1zLXN0YXJ0LmJnLWF6dWwtY2xhcm8ucC00Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBpbWcubWUtMyhzdHlsZT0id2lkdGg6IDkwcHgiIHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy00LnN2ZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuZC1mbGV4LmZsZXgtY29sdW1uCiAgICAgICAgICAgIHAucGUteGwtMy5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRW4gbGEgY29uc3RydWNjacOzbiBkZSBhbGdvcml0bW9zIHNlIHB1ZWRlbiBlbmNvbnRyYXIgZGlmZXJlbnRlcyBlbmZvcXVlcyBxdWUgcGVybWl0ZW4gZGFyIHNvbHVjacOzbiBhIGxvcyBwcm9ibGVtYXMgY29tcHV0YWNpb25hbGVzLiBMb3MgcGFyYWRpZ21hcyBlbiBlbCBkaXNlw7FvIGRlIGFsZ29yaXRtb3Mgc29uIGNvbW8gdW4gbWFsZXTDrW4gcmVwbGV0byBkZSBoZXJyYW1pZW50YXMsIGNhZGEgdW5hIGNvbiB1bmEgZmluYWxpZGFkIGVzcGVjw61maWNhLCBhc8OtOyBwb2Ryw6EgdXRpbGl6YXIgc2Vnw7puIGxhcyBmb3J0YWxlemFzIHkgZWwgY2FzbyBwcm9wdWVzdG8gYWxndW5hIGRlIGVsbGFzLiBDb21vIHNlw7FhbGEgTWFuY2lsbGEgSGVycmVyYSAoMjAxNSksICJlbCBkb21pbmlvIGRlIGRpZmVyZW50ZXMgcGFyYWRpZ21hcyBkZSBkaXNlw7FvIHRlIHBlcm1pdGlyw6EgYWJvcmRhciBwcm9ibGVtYXMgY29tcGxlam9zIGRlIG1hbmVyYSBzaXN0ZW3DoXRpY2EgeSBlZmljaWVudGUiIChwLiA2NykuCiAgICAgICAgcC5tYi0wIEEgY29udGludWFjacOzbiBzZSBkYXLDoW4gYSBjb25vY2VyIGxvcyBncmFuZGVzIHJhc2dvcyBlbiBsb3MgZnVuZGFtZW50b3MgZGVsIGRpc2XDsW8gZGUgYWxnb3JpdG1vcy4gCiAgICAgIC5jb2wtMTIuY29sLXhsLTUuZC1ub25lLmQteGwtYmxvY2soZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy01LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCgogICAgI3RfMV8xLnRpdHVsby1zZWd1bmRvCiAgICAgIGRpdi5kLWZsZXgKICAgICAgICBzcGFuLm1lLTMgMS4xICAKICAgICAgICBoMiBGdW5kYW1lbnRvcyBkZWwgZGlzZcOxbyBhbGdvcsOtdG1pY28KCiAgICBwLm1iLTQgTG9zIHByaW5jaXBpb3MgcXVlIHJpZ2VuIGVsIGRpc2XDsW8gZGUgdW4gYWxnb3JpdG1vIHNvbjoKCiAgICBUYWJzQy5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJDb3JyZWNjacOzbiIsIDppY29uVXJsPSJyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTYuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtMTIuY29sLWxnLTUuY29sLXhsLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTExLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgaDQgQ29ycmVjY2nDs24KICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS11cCIpIFBhcmEgdG9kYXMgbGFzIGVudHJhZGFzICBkZSBkYXRvcyB2w6FsaWRvcyBzZSBkZWJlcsOhIHByb2R1Y2lyIGxhIHNhbGlkYSBjb3JyZWN0YS4gCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJFZmljaWVuY2lhIiwgOmljb25Vcmw9InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctNy5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC0xMi5jb2wtbGctNS5jb2wteGwtNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTIucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICBoNCBFZmljaWVuY2lhCiAgICAgICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtdXAiKSBMb3MgcmVjdXJzb3MgY29tbyB0aWVtcG8gZGUgZWplY3VjacOzbiB5IG1lbW9yaWEgdXRpbGl6YWRhIGRlYmVyw6FuIHV0aWxpemFyc2UgZGUgbGEgbWFuZXJhIG3DoXMgw7NwdGltYS4KICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IlNpbXBsaWNpZGFkIiwgOmljb25Vcmw9InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctOC5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC0xMi5jb2wtbGctNS5jb2wteGwtNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTMucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICBoNCBTaW1wbGljaWRhZAogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLXVwIikgRWwgY8OzZGlnbyBkZWJlIHNlciBjbGFybyB5IHByZWNpc28uCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJNb2R1bGFyaWRhZCIsIDppY29uVXJsPSJyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTkuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5kLW5vbmUuZC1sZy1ibG9jay5jb2wtbWQtMTIuY29sLWxnLTUuY29sLXhsLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE0LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuY29sLW1kLTEyLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgaDQgTW9kdWxhcmlkYWQKICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS11cCIpIFNlIGRlYmUgZGl2aWRpciBlbCBwcm9ibGVtYSBlbiBzZWdtZW50b3MgbWFuZWphYmxlcy4KICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkVzY2FsYWJpbGlkYWQiLCA6aWNvblVybD0icmVxdWlyZSgnQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0xMC5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmQtbm9uZS5kLWxnLWJsb2NrLmNvbC1tZC0xMi5jb2wtbGctNS5jb2wteGwtNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTUucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5jb2wtbWQtMTIuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICBoNCBFc2NhbGFiaWxpZGFkCiAgICAgICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtdXAiKSBJbmNsdXNvIGFsIGluY3JlbWVudGFyIGxvcyBkYXRvcyBkZSBlbnRyYWRhIGVsIGPDs2RpZ28gZGViZXLDoSBmdW5jaW9uYXIgZWZpY2llbnRlbWVudGUuCgogICAgcC5tYi00IEFsZ3Vub3MgZGUgbG9zIHBhcmFkaWdtYXMgbcOhcyBpbXBvcnRhbnRlcyB1dGlsaXphZG9zIGEgbGEgaG9yYSBkZSBwcm9kdWNpciBhbGdvcml0bW9zIHNvbjogCiAgICBwLm1iLTMgPHN0cm9uZz5UYWJsYSAxPC9zdHJvbmc+IFBhcmFkaWdtYXMgbcOhcyB1dGlsaXphZG9zIGFsIHByb2R1Y2lyIGFsZ29yaXRtb3MKCiAgICAudGFibGEtYS5tYi00CiAgICAgIHRhYmxlLnRleHQtY2VudGVyCiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoLnRleHQtY2VudGVyKHdpZHRoPSIyMCUiKSBQYXJhZGlnbWEKICAgICAgICAgICAgdGgudGV4dC1jZW50ZXIgQ2FyYWN0ZXLDrXN0aWNhcwogICAgICAgICAgICB0aC50ZXh0LWNlbnRlciBBcGxpY2FjaW9uZXMgcHLDoWN0aWNhcwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC50ZXh0LWJvbGQuYmctZ3Jpcy5oLTEwMC5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LmJvcmRlci1yaWdodC1ncmlzIERpdmlkZSB5IHZlbmNlcsOhcwogICAgICAgICAgICB0ZC50ZXh0LXN0YXJ0LnBiLTAuYm9yZGVyLXJpZ2h0LWdyaXMKICAgICAgICAgICAgICBwLm1iLTMgTG9zIHBhc29zIHF1ZSBzaWd1ZSBlc3RlIHBhcmFkaWdtYSBzb246CiAgICAgICAgICAgICAgcC5tYi0xLm1zLTMgMS4gRGl2aWRpcgogICAgICAgICAgICAgIHAubWItMS5tcy0zIDIuIENvbnF1aXN0YXIKICAgICAgICAgICAgICBwLm1iLTMubXMtMyAzLiBDb21iaW5hcgogICAgICAgICAgICB0ZC5iZy1ncmlzLmFsaWduLWJhc2VsaW5lLnRleHQtc3RhcnQKICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBPcmRlbmFtaWVudG8gKE1lcmdlU29ydCwgUXVpY2tTb3J0KS4KIAogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIE11bHRpcGxpY2FjacOzbiBkZSBtYXRyaWNlcyBkZSBTdHJhc3Nlbi4KCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgVHJhbnNmb3JtYWRhIHLDoXBpZGEgZGUgRm91cmllciAoRkZUKS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLnRleHQtYm9sZC5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LmJvcmRlci1yaWdodC1ncmlzIERpdmlkZSBhbmQgPGk+Q29ucXVlcjwvaT4KICAgICAgICAgICAgdGQudGV4dC1zdGFydC5wdC0wLmJnLXdoaXRlLmJvcmRlci1ib3R0b20tZ3Jpcy5ib3JkZXItcmlnaHQtZ3JpcwogICAgICAgICAgICAgIHAubWItMyBFbiBlbCBwYXNvIDEsIHNlIGRlc2NvbXBvbmUgZWwgcHJvYmxlbWEgZW4gc3VicHJvYmxlbWFzOyBwb3N0ZXJpb3JtZW50ZSwgZW4gZWwgcGFzbyAyIHNlIHJlc3VlbHZlbiBjYWRhIHVubyBkZSBlc29zIOKAnHN1YnByb2JsZW1hcywgdXNhbmRvIHJlY3Vyc2l2aWRhZOKAnTsgcGFyYSBmaW5hbGl6YXIsIHNlIHV0aWxpemEgY29tYmluYXIsIHBhcmEgdW5pciBsYXMgc29sdWNpb25lcyBhIGxvcyBzdWJwcm9ibGVtYXMuCiAgICAgICAgICAgIHRkLmJnLWdyaXMuYm9yZGVyLWJvdHRvbS1ncmlzCgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQuYmctZ3Jpcy5ib3JkZXItYm90dG9tLWdyaXMuYm9yZGVyLXJpZ2h0LWdyaXMKICAgICAgICAgICAgdGQuYmctd2hpdGUudGV4dC1zdGFydC5ib3JkZXItYm90dG9tLWdyaXMoY29sc3Bhbj0iMiIpIEVzdGUgcGFyYWRpZ21hIHBlcm1pdGUgYWJvcmRhciBwcm9ibGVtYXMgY29tcGxlam9zIGRpdmlkacOpbmRvbG9zIGVuIHN1YnByb2JsZW1hcyBtw6FzIHBlcXVlw7FvcyB5IG1hbmVqYWJsZXMuIENvbW8gc2XDsWFsYSBNYW5jaWxsYSBIZXJyZXJhICgyMDE1KSwgImxhIGVzdHJhdGVnaWEgZGl2aWRlIHkgdmVuY2Vyw6FzLCBlcyBmdW5kYW1lbnRhbCBlbiBlbCBkaXNlw7FvIGRlIGFsZ29yaXRtb3MgZWZpY2llbnRlcywgcGVybWl0aWVuZG8gcmVkdWNpciBsYSBjb21wbGVqaWRhZCBkZSBwcm9ibGVtYXMgYXBhcmVudGVtZW50ZSBpbnRyYXRhYmxlcyIgKHAuIDQ1KS4KCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5iZy1ncmlzLnRleHQtYm9sZC5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LmJvcmRlci1yaWdodC1ncmlzIFByb2dyYW1hY2nDs24gZGluw6FtaWNhCiAgICAgICAgICAgIHRkLmJnLXdoaXRlLmJvcmRlci1ib3R0b20tZ3Jpcy5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LmJvcmRlci1yaWdodC1ncmlzCiAgICAgICAgICAgICAgcC5tYi0zIFNlIHV0aWxpemEgY3VhbmRvOgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIExvcyBwcm9ibGVtYXMgc2Ugc3VwZXJwb25lbi4KICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBMb3MgcHJvYmxlbWFzIHRpZW5lbiB1bmEgc3ViZXN0cnVjdHVyYSDDs3B0aW1hLgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wLnBlLXhsLTUgTGFzIHNvbHVjaW9uZXMgZGUgbG9zIHN1YnByb2JsZW1hcyBzZSBwdWVkZW4gYWxtYWNlbmFyLgogICAgICAgICAgICB0ZC5iZy1ncmlzLmJvcmRlci1ib3R0b20tZ3Jpcy5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0CiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgTWVtb3JpemFjacOzbiBkZSByZXN1bHRhZG9zLiAgCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgRWxpbWluYWNpw7NuIGRlIGPDoWxjdWxvcyByZWR1bmRhbnRlcy4KICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBPcHRpbWl6YWNpw7NuIGRlIHN1YnByb2JsZW1hcy4KCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5iZy1ncmlzLmJvcmRlci1ib3R0b20tZ3Jpcy5ib3JkZXItcmlnaHQtZ3JpcwogICAgICAgICAgICB0ZC5iZy1ncmlzLnRleHQtc3RhcnQuYm9yZGVyLWJvdHRvbS1ncmlzKGNvbHNwYW49IjIiKSBDdWFuZG8gc2UgZW5mcmVudGEgYSBwcm9ibGVtYXMgY29uIHN1YnByb2JsZW1hcyBzdXBlcnB1ZXN0b3MsIGxhIHByb2dyYW1hY2nDs24gZGluw6FtaWNhIGVzIGxhIG1lam9yIGFsaWFkYS4gRXN0YSB0w6ljbmljYSBhbG1hY2VuYSByZXN1bHRhZG9zIGludGVybWVkaW9zLCBwYXJhIGV2aXRhciBjw6FsY3Vsb3MgcmVkdW5kYW50ZXMsIG1lam9yYW5kbyBzaWduaWZpY2F0aXZhbWVudGUgbGEgZWZpY2llbmNpYS4KCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5iZy13aGl0ZS5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LnRleHQtYm9sZC5ib3JkZXItcmlnaHQtZ3JpcyBBbGdvcml0bW9zIHZvcmFjZXMKICAgICAgICAgICAgdGQudGV4dC1zdGFydC5wYi0wLmJvcmRlci1yaWdodC1ncmlzLmJnLXdoaXRlCiAgICAgICAgICAgICAgcC5tYi0zIFByaW5jaXBpb3MgZGUgZGlzZcOxbzoKICAgICAgICAgICAgICBwLm1iLTEubXMtMy5wZS14eGwtNSA8c3Ryb25nPjEuIFNlbGVjY2nDs24gdm9yYXo6PC9zdHJvbmc+IGVsZWdpciBsYSBtZWpvciBvcGNpw7NuIGRpc3BvbmlibGUuIAogICAgICAgICAgICAgIHAubWItMS5tcy0zLnBlLXh4bC01IDxzdHJvbmc+Mi4gRmFjdGliaWxpZGFkOjwvc3Ryb25nPiB2ZXJpZmljYXIgc2kgbGEgZWxlY2Npw7NuIG1hbnRpZW5lIHVuYSBzb2x1Y2nDs24gdmlhYmxlLgogICAgICAgICAgICAgIHAubWItMy5tcy0zLnBlLXh4bC01IDxzdHJvbmc+My4gT3B0aW1pemFjacOzbiBsb2NhbDo8L3N0cm9uZz4gYnVzY2FyIGVsIMOzcHRpbW8gZW4gY2FkYSBwYXNvLgoKICAgICAgICAgICAgdGQuYmctd2hpdGUuYWxpZ24tYmFzZWxpbmUudGV4dC1zdGFydC5wYi0wCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgUHJvYmxlbWEgZGUgbGEgbW9jaGlsYSAoS25hcHNhY2sgUHJvYmxlbSkuICAKICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCAgUHJvYmxlbWEgZGUgbGEgbW9uZWRhIG3DrW5pbWEgKENvaW4gQ2hhbmdlIFByb2JsZW0pLgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wICDDgXJib2xlcyBkZSBleHBhbnNpw7NuIG3DrW5pbWEgKE1pbmltdW0gU3Bhbm5pbmcgVHJlZSkuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgIEFsZ29yaXRtbyBkZSBIdWZmbWFuIChDb21wcmVzacOzbiBkZSBkYXRvcykuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgUHJvYmxlbWEgZGUgc2VsZWNjacOzbiBkZSBhY3RpdmlkYWRlcy4KCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC50ZXh0LWJvbGQuYWxpZ24tYmFzZWxpbmUudGV4dC1zdGFydC5ib3JkZXItcmlnaHQtZ3JpcyBHcmVlZHkKICAgICAgICAgICAgdGQudGV4dC1zdGFydC5wdC0wLmJnLXdoaXRlLmJvcmRlci1ib3R0b20tZ3Jpcy5ib3JkZXItcmlnaHQtZ3JpcwogICAgICAgICAgICAgIHAubWItMCBTZWfDum4gU2lsdmEgUmFtw61yZXogKDIwMTgpLCAibG9zIGFsZ29yaXRtb3Mgdm9yYWNlcyB0b21hbiBkZWNpc2lvbmVzIGxvY2FsbWVudGUgw7NwdGltYXMgZW4gY2FkYSBwYXNvLCBlc3BlcmFuZG8gbGxlZ2FyIGEgdW5hIHNvbHVjacOzbiBnbG9iYWxtZW50ZSDDs3B0aW1hIiAocC4gMTQ1KS4KICAgICAgICAgICAgdGQuYmctd2hpdGUuYm9yZGVyLWJvdHRvbS1ncmlzCiAgICAgICAgICAKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLmJnLXdoaXRlLmJvcmRlci1ib3R0b20tZ3Jpcy5ib3JkZXItcmlnaHQtZ3JpcwogICAgICAgICAgICB0ZC5iZy13aGl0ZS50ZXh0LXN0YXJ0LmJvcmRlci1ib3R0b20tZ3Jpcyhjb2xzcGFuPSIyIikgRW4gc2l0dWFjaW9uZXMgZG9uZGUgc2UgcmVxdWllcmEgdG9tYXIgZGVjaXNpb25lcyBwYXNvIGEgcGFzbywgbG9zIGFsZ29yaXRtb3Mgdm9yYWNlcyBwZXJtaXRlbiBoYWNlciBsYSBtZWpvciBlbGVjY2nDs24gbG9jYWwgZW4gY2FkYSBtb21lbnRvLCBidXNjYW5kbyBhbGNhbnphciB1bmEgc29sdWNpw7NuIMOzcHRpbWEgZ2xvYmFsLgoKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLmJnLWdyaXMuYm9yZGVyLXJpZ2h0LWdyaXMudGV4dC1ib2xkLmFsaWduLWJhc2VsaW5lLnRleHQtc3RhcnQgVnVlbHRhIGF0csOhcwogICAgICAgICAgICB0ZC5iZy13aGl0ZS5ib3JkZXItYm90dG9tLWdyaXMuYm9yZGVyLXJpZ2h0LWdyaXMuYWxpZ24tYmFzZWxpbmUudGV4dC1zdGFydAogICAgICAgICAgICAgIHAubWItMyBFc3RlIHBhcmFkaWdtYSBlcyBlc2VuY2lhbCBwYXJhIGxhIGLDunNxdWVkYSBleGhhdXN0aXZhLCBkb25kZSBzZSByZXF1aWVyZToKICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEubXMtMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wLnBlLXhsLTQgRXhwbG9yYXIgdG9kYXMgbGFzIHBvc2liaWxpZGFkZXMuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMC5wZS14bC00IERlc2hhY2VyIGRlY2lzaW9uZXMgcXVlIG5vIHByb2R1emNhbiBzb2x1Y2lvbmVzLgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMS5tcy0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAucGUteGwtNCBFbmNvbnRyYXIgdG9kYXMgbGFzIHNvbHVjaW9uZXMgcG9zaWJsZXMuIAogICAgICAgICAgICB0ZC5iZy13aGl0ZS5ib3JkZXItYm90dG9tLWdyaXMuYWxpZ24tYmFzZWxpbmUudGV4dC1zdGFydAogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIFN1ZG9rdS4KICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBQcm9ibGVtYSBkZSBsYXMgTiByZWluYXMuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgR2VuZXJhY2nDs24gZGUgc3ViY29uanVudG9zLgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIELDunNxdWVkYSBkZSBjYW1pbm9zIGVuIGxhYmVyaW50b3MuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgUmVzb2x1Y2nDs24gZGUgcHJvYmxlbWFzIGRlIHBhcnRpY2nDs24uCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgU29sdWNpw7NuIGRlIHB1enpsZXMgeSBqdWVnb3MuCgogICAgICAgICAgdHIgIAogICAgICAgICAgICB0ZC5iZy1ncmlzLnRleHQtYm9sZC5hbGlnbi1iYXNlbGluZS50ZXh0LXN0YXJ0LmJvcmRlci1yaWdodC1ncmlzLmJvcmRlci1ib3R0b20tZ3JpcyBCYWNrdHJhY2tpbmcKICAgICAgICAgICAgdGQuYmctZ3Jpcy50ZXh0LXN0YXJ0LmJvcmRlci1ib3R0b20tZ3Jpcyhjb2xzcGFuPSIyIikgRWwgPGVtPmJhY2t0cmFja2luZzwvZW0+IGVzIHVuYSBoZXJyYW1pZW50YSBxdWUgcGVybWl0ZSBleHBsb3JhciBtdWNoYXMgY29tYmluYWNpb25lcyBwb3NpYmxlcywg4oCcZXNwZWNpYWxtZW50ZSBjdWFuZG8gbm8gaGF5IHVuIGNyaXRlcmlvIGRpcmVjdG8gcGFyYSBzYWJlciwgZGUgaW5tZWRpYXRvLCBjdcOhbCBlcyBsYSBtZWpvciBvcGNpw7Nu4oCdLgoKICAgICN0XzFfMi50aXR1bG8tc2VndW5kbwogICAgICBkaXYuZC1mbGV4CiAgICAgICAgc3Bhbi5tZS0zIDEuMiAgCiAgICAgICAgaDIgQW7DoWxpc2lzIHkgb3B0aW1pemFjacOzbiBkZSBlZmljaWVuY2lhCiAgICAKICAgIC5yb3cubWItNAogICAgICAuY29sLTEyLmNvbC14bC00LmQtbm9uZS5kLXhsLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE2LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgIC5jb2wtMTIuY29sLXhsLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgLmQtZmxleC5hbGlnbi1pdGVtcy1zdGFydC5iZy00LnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgaW1nLm1lLTMoc3R5bGU9IndpZHRoOiA5MHB4IiBzcmM9J0AvYXNzZXRzL2N1cnNvL3VuaWRhZC9pbWctMTcuc3ZnJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAgIC5kLWZsZXguZmxleC1jb2x1bW4KICAgICAgICAgICAgcC5wZS14bC0zLm1iLTAoZGF0YS1hb3M9ImZhZGUtdXAiKSBMYSBlZmljaWVuY2lhIGVzIHVuIGFzcGVjdG8gY3J1Y2lhbCBlbiBlbCBkZXNhcnJvbGxvIGRlIGFsZ29yaXRtb3MuIENvbW8gc2XDsWFsYSBDYXN0aWxsbyBSb21lcm8gKDIwMTkpLCAibGEgZGlmZXJlbmNpYSBlbnRyZSB1biBhbGdvcml0bW8gZWZpY2llbnRlIHkgdW5vIGluZWZpY2llbnRlLCBwdWVkZSBzaWduaWZpY2FyIGxhIGRpZmVyZW5jaWEgZW50cmUgcmVzb2x2ZXIgdW4gcHJvYmxlbWEgZW4gc2VndW5kb3MgbyBlbiBhw7FvcyIgKHAuIDE3OCkuIFBvciBzdSBwYXJ0ZSwgU2lsdmEgUmFtw61yZXogKDIwMTgpLCAiZWwgYW7DoWxpc2lzIGRlIGVmaWNpZW5jaWEgbm8gc29sbyBub3MgcGVybWl0ZSBjb21wYXJhciBhbGdvcml0bW9zLCBzaW5vIHF1ZSB0YW1iacOpbiBub3MgYXl1ZGEgYSBwcmVkZWNpciBzdSBjb21wb3J0YW1pZW50byAsZW4gZGlmZXJlbnRlcyBlc2NlbmFyaW9zIiAocC4gNzgpLgoKICAgIHAubWItMyA8c3Ryb25nPlRhYmxhIDIuPC9zdHJvbmc+IFTDqWNuaWNhcyBkZSBvcHRpbWl6YWNpw7NuIGRlIGVmaWNpZW5jaWEKCiAgICAudGFibGEtYS5tYi00CiAgICAgIHRhYmxlLnRleHQtY2VudGVyCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLmJnLW1vcmFkby50ZXh0LXdoaXRlLnRleHQtYm9sZC5ib3JkZXItYm90dG9tLXdoaXRlKHJvd3NwYW49IjIiIHdpZHRoPSIyNSUiKSBNw6l0cmljYXMgZGUgcmVuZGltaWVudG8KICAgICAgICAgICAgdGQuYmctZ3Jpcy5ib3JkZXItcmlnaHQtZ3Jpcyh3aWR0aD0iMzAlIikgVGllbXBvIGRlIGVqZWN1Y2nDs24KICAgICAgICAgICAgdGQuYmctZ3JpcwogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMS5tcy0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgVGllbXBvIHJlYWwgKHdhbGwtY2xvY2sgdGltZSkuCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBUaWVtcG8gZGUgQ1BVLgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMS5tcy0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgTsO6bWVybyBkZSBvcGVyYWNpb25lcyBiw6FzaWNhcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkLmJnLXdoaXRlLmJvcmRlci1yaWdodC1ncmlzIFVzbyBkZSBtZW1vcmlhCiAgICAgICAgICAgIHRkLmJnLXdoaXRlCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBNZW1vcmlhIGVzdMOhdGljYS4gCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBNZW1vcmlhIGRpbsOhbWljYS4KICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEubXMtMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIFBpbGEgZGUgbGxhbWFkYXMgcmVjdXJzaXZhcy4KICAgICAgICAgIAogICAgICAgICAgdHIKICAgICAgICAgICAgdGQuYmctbW9yYWRvLnRleHQtd2hpdGUudGV4dC1ib2xkLmJvcmRlci1ib3R0b20td2hpdGUod2lkdGg9IjI1JSIpIE5vdGFjacOzbiBhc2ludMOzdGljYQogICAgICAgICAgICB0ZC5iZy1ncmlzLmJvcmRlci1yaWdodC1ncmlzIE5vdGFjacOzbiBhc2ludMOzdGljYQogICAgICAgICAgICB0ZC5iZy1ncmlzLnRleHQtc3RhcnQucGUteGwtNSBMYSBub3RhY2nDs24gYXNpbnTDs3RpY2EgcGVybWl0ZSBkZXNjcmliaXIgZWwgY29tcG9ydGFtaWVudG8gZGVsIGFsZ29yaXRtbyBzaW4gZGVwZW5kZXIgZGUgZGV0YWxsZXMgZGUgaW1wbGVtZW50YWNpw7NuIGVzcGVjw61maWNvcy4KCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5iZy1tb3JhZG8udGV4dC13aGl0ZS50ZXh0LWJvbGQuYm9yZGVyLWJvdHRvbS13aGl0ZShyb3dzcGFuPSIyIiB3aWR0aD0iMjUlIikgVMOpY25pY2FzIGRlIG9wdGltaXphY2nDs24KICAgICAgICAgICAgdGQuYmctZ3Jpcy5ib3JkZXItcmlnaHQtZ3Jpcyh3aWR0aD0iMzAlIikgT3B0aW1pemFjacOzbiBkZSBjw7NkaWdvCiAgICAgICAgICAgIHRkLmJnLWdyaXMudGV4dC1zdGFydAogICAgICAgICAgICAgIHAubWItMyBNZWpvcmFyIHBhcnRlcyBkZWwgY8OzZGlnbyBwYXJhIHF1ZSBzZWEgbcOhcyBlZmljaWVudGUgYXBsaWNhbmRvOgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMS5tcy0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgRWxpbWluYWNpw7NuIGRlIGPDs2RpZ28gaW5uZWNlc2FyaW8uCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBTaW1wbGlmaWNhciBvcGVyYWNpb25lcy4gCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZC5iZy13aGl0ZS5ib3JkZXItcmlnaHQtZ3JpcyBPcHRpbWl6YWNpw7NuIGRlIGJ1Y2xlcwogICAgICAgICAgICB0ZC5iZy13aGl0ZQogICAgICAgICAgICAgIHAubWItMy50ZXh0LXN0YXJ0LnBlLXhsLTUgU2UgZW5mb2NhIGVuIGxhIG9wdGltaXphY2nDs24gZGUgYnVjbGVzIG8gY2ljbG9zLCBhbGd1bmFzIGRlIGxhcyB0w6ljbmljYXMgc29uOgogICAgICAgICAgICAgIGRpdi5kLWZsZXgubWItMS5tcy0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGV2cm9uLXJpZ2h0LmZzLTE4cHgubWUtMi50ZXh0LW1vcmFkbwogICAgICAgICAgICAgICAgcC5mcy0xOHB4Lm1iLTAgUmVkdWNpciBlbCBuw7ptZXJvIGRlIGl0ZXJhY2lvbmVzLiAKICAgICAgICAgICAgICBkaXYuZC1mbGV4Lm1iLTEubXMtMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hldnJvbi1yaWdodC5mcy0xOHB4Lm1lLTIudGV4dC1tb3JhZG8KICAgICAgICAgICAgICAgIHAuZnMtMThweC5tYi0wIFRlcm1pbmFyIGFudGVzIGRlIHRpZW1wbyBlbCBidWNsZS4gCiAgICAgICAgICAgICAgZGl2LmQtZmxleC5tYi0xLm1zLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZXZyb24tcmlnaHQuZnMtMThweC5tZS0yLnRleHQtbW9yYWRvCiAgICAgICAgICAgICAgICBwLmZzLTE4cHgubWItMCBNb3ZlciBvcGVyYWNpb25lcyBmdWVyYSBkZWwgYnVjbGUuIAoKICAgIC5yb3cubWItNQogICAgICAuY29sLTEyLmNvbC14bC04LmNvbC14eGwtOC5kLWZsZXguZmxleC1jb2x1bW4KICAgICAgICAuZC1mbGV4LmFsaWduLWl0ZW1zLXN0YXJ0LmJnLWFtYXJpbGxvLnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAgIGltZy5tZS0zKHN0eWxlPSJ3aWR0aDogOTBweCIgc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE4LnN2ZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAuZC1mbGV4LmZsZXgtY29sdW1uCiAgICAgICAgICAgIHAucGUteGwtMy5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRXN0YXMgdMOpY25pY2FzIGRlIG9wdGltaXphY2nDs24gZGUgYWxnb3JpdG1vcywgc29uIMO6dGlsZXMgYWwgdHJhYmFqYXIgY29uIGdyYW5kZXMgY2FudGlkYWRlcyBkZSBkYXRvcyBvIGN1YW5kbyBzZSBkZWJlIG9wdGltaXphciBlbCBwcm9ncmFtYSBwYXJhIHF1ZSByZXNwb25kYSBtw6FzIHLDoXBpZG8uCiAgICAgICAgcC5tYi0wIExhIGZpbmFsaWRhZCBkZWwgY29uY2VwdG8gZGUgdW4gYWxnb3JpdG1vIGVmaWNpZW50ZSBzZSBjZW50cmEgZW4gZWwgZGlzZcOxbyB5IGFuw6FsaXNpcyBkZSBzb2x1Y2lvbmVzIHF1ZSBwZXJtaXRhbiByZXNvbHZlciBkZSBtYW5lcmEgw6FnaWwsIHkgdXRpbGl6YXIgbGEgbWVub3IgY2FudGlkYWQgZGUgcmVjdXJzbyBwb3NpYmxlLCBjb21vIHRpZW1wbyBkZSBlamVjdWNpw7NuIHkgbWVtb3JpYSwgZXMgZGVjaXI7IGxhIGVmaWNpZW5jaWEgc2UgdHJhZHVjZSBlbiBsYSBjYXBhY2lkYWQgZGVsIGFsZ29yaXRtbyBkZSByZWFsaXphciBzdSB0YXJlYSwgdXRpbGl6YW5kbyBsYSBtZW5vciBjYW50aWRhZCBkZSBtZWRpb3MgcG9zaWJsZXMuICAKICAgICAgLmQtbm9uZS5kLXhsLWJsb2NrLmNvbC14bC00LmNvbC14eGwtNC5teC1hdXRvLm10LTQubXQteGwtMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTE5LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpICAKCiAgICAjdF8xXzMudGl0dWxvLXNlZ3VuZG8KICAgICAgZGl2LmQtZmxleAogICAgICAgIHNwYW4ubWUtMyAxLjMgIAogICAgICAgIGgyIEltcG9ydGFuY2lhIGRlIGxvcyBhbGdvcml0bW9zIGVmaWNpZW50ZXMKCiAgICBwLm1iLTQgQSBjb250aW51YWNpw7NuLCBzZSByZXN1bWVuIGFsZ3VuYXMgZGUgbGFzIHByaW5jaXBhbGVzIGltcG9ydGFuY2lhcyBkZSBsb3MgYWxnb3JpdG1vcyBlZmljaWVudGVzOgoKICAgIEltYWdlbkluZm9ncmFmaWNhLmNvbG9yLXNlY3VuZGFyaW8ubWItNQogICAgICB0ZW1wbGF0ZSh2LXNsb3Q6aW1hZ2VuKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdW5pZGFkL2ltZy0yMC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQoKICAgICAgLnRhcmpldGEuYmctd2hpdGUucC00KHg9IjE0JSIgeT0iNjIlIiBudW1lcm89IisiKQogICAgICAgIC5oNS5tYi0yIEFob3JybyBkZSB0aWVtcG8KICAgICAgICBwIFVuIGFsZ29yaXRtbyBlZmljaWVudGUgZXMgYXF1ZWwgcXVlIHNlIGVqZWN1dGEgZW4gbWVub3MgdGllbXBvLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTQoeD0iMzMlIiB5PSIyMSUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgT3B0aW1pemFjacOzbiBkZSByZWN1cnNvcwogICAgICAgIHAgTGEgZWZpY2llbmNpYSBwZXJtaXRlIHF1ZSBzZSB1dGlsaWNlbiBtZW5vcyByZWN1cnNvcyBjb21vIG1lbW9yaWEsIGVuZXJnw61hLCBDUFUsIGltcG9ydGFudGUgZW4gZWwgZGVzYXJyb2xsbyBkZSBhbGdvcml0bW9zIHF1ZSBzZSBlamVjdXRlbiBlbiBlcXVpcG9zIGNvbiBsaW1pdGFjaW9uZXMgZsOtc2ljYXMsIGNvbW8gZGlzcG9zaXRpdm9zIG3Ds3ZpbGVzIG8gc2lzdGVtYXMgZW1iZWJpZG9zLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTQoeD0iNjclIiB5PSIyMSUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgRXNjYWxhYmlsaWRhZAogICAgICAgIHAgTG9zIGFsZ29yaXRtb3MgZWZpY2llbnRlcyBwZXJtaXRlbiBtYW5lamFyIGVsIGNyZWNpbWllbnRvIGVuIGVsIHZvbHVtZW4gZGUgZGF0b3MsIHNpbiBxdWUgc3UgcmVuZGltaWVudG8gc2UgdmVhIGFmZWN0YWRvOyBlc3RvIGVzIGltcG9ydGFudGUgZW4gYXBsaWNhY2lvbmVzIHF1ZSBvcGVyZW4gZ3JhbmRlcyBiYXNlcyBkZSBkYXRvcyBvIHF1ZSByZXF1aWVyYW4gcHJvY2VzYXIgZ3JhbmRlcyB2b2zDum1lbmVzIGRlIGRhdG9zIGVuIHBvY28gdGllbXBvLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTQoeD0iODYlIiB5PSI2MiUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgUmVkdWNjacOzbiBkZSBjb3N0b3MgCiAgICAgICAgcCBFbiBlbnRvcm5vcyBjb21lcmNpYWxlcyB5IGVtcHJlc2FyaWFsZXMsIHVuIGFsZ29yaXRtbyByZWR1Y2UgZWwgY29zdG8gZGUgb3BlcmFjacOzbiwgZGViaWRvIGEgcXVlIHV0aWxpemEgbWVub3MgaW5mcmFlc3RydWN0dXJhIHBhcmEgbGxldmFyIGEgY2FibyBzdSB0cmFiYWpvLgoKICAgIHAubWItNCBFbiByZXN1bWVuLCBlbCBjb25jZXB0byBkZSBhbGdvcml0bW9zIGVmaWNpZW50ZXMsIHNlIGVuZm9jYSBlbiBsYSBjcmVhY2nDs24gZGUgc29sdWNpb25lcyBxdWUgc2UgZWplY3V0ZW4gZGUgbWFuZXJhIMOzcHRpbWEgeSBlY29uw7NtaWNhIHBvc2libGUuIExvIGFudGVyaW9yIGVzIHZpdGFsIHBhcmEgZWwgZGVzYXJyb2xsbyBkZSBzb2Z0d2FyZSB5IHNpc3RlbWFzIGRlIGVudG9ybm9zIGRvbmRlIGxvcyByZWN1cnNvcyBzb24gbGltaXRhZG9zIG8gc2UgZGViYSBwcmlvcml6YXIgZWwgcmVuZGltaWVudG8uIAoKICAgIC5yb3cubWItNS5teC0wCiAgICAgIC5kLW5vbmUuZC14bC1ibG9jay5jb2wtNC5weC0wKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBpbWcuaC0xMDAoc3JjPSdAL2Fzc2V0cy9jdXJzby91bmlkYWQvaW1nLTIxLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgIC5jb2wtMTIuY29sLXhsLTguZC1mbGV4LmFsaWduLWl0ZW1zLWNlbnRlci5iZy00LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBwLm1iLTAoZGF0YS1hb3M9ImZhZGUtdXAiKSBJbWFnaW5lIGRvcyBhbGdvcml0bW9zIHBhcmEgb3JkZW5hciB1bmEgbGlzdGEgZGUgbsO6bWVyb3MuIFVubyBkZSBlbGxvcyB1c2EgdW4gbcOpdG9kbyBzaW1wbGUgcXVlIGNvbXBhcmEgY2FkYSBuw7ptZXJvIGNvbiBsb3MgZGVtw6FzIChjb21vIGVsIDxlbT5CdWJibGUgU29ydDwvZW0+KSwgbWllbnRyYXMgcXVlIGVsIG90cm8gdXRpbGl6YSB1biBtw6l0b2RvIG3DoXMgb3B0aW1pemFkbyAoY29tbyBlbCA8ZW0+TWVyZ2UgU29ydDwvZW0+KS4gQW1ib3MgbG9ncmFuIG9yZGVuYXIgbGEgbGlzdGEsIHBlcm8gPHN0cm9uZz5NZXJnZSBTb3J0PC9zdHJvbmc+IGxvIGhhY2UgZW4gbXVjaG8gbWVub3MgdGllbXBvIHBhcmEgbGlzdGFzIGdyYW5kZXMsIHBvcnF1ZSB0aWVuZSB1bmEgZWZpY2llbmNpYSBtdWNobyBtYXlvciwgZW4gdMOpcm1pbm9zIGRlIHRpZW1wbyBkZSBlamVjdWNpw7NuLgoKICAgIHAubWItNCBQYXJhIHByYWN0aWNhciB5IHBlcmZlY2Npb25hciBsb3MgY29uY2VwdG9zIGFkcXVpcmlkb3MgZW4gZXN0ZSBwcmltZXIgdGVtYSBkZSBsYSB1bmlkYWQsIGxlIGludml0YW1vcyBhIGxlZXIgbG9zIHNpZ3VpZW50ZXMgbGlicm9zOiAKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLTktYXp1bAogICAgICAucHgtNC5weC1tZC01LnB0LTUucGItMAogICAgICAgIGgyIE1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctOAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMubWItYXV0by5tdC0xKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEudGV4dC1zbWFsbC50ZXh0LXByaW1hcnkodGFyZ2V0PSJfYmxhbmsiLCBocmVmPSJodHRwczovL2VsaWJyby5uZXQvZW4vZXJlYWRlci90ZWNub2xvZ2ljYWRlbG9yaWVudGUvNjg0Mzg/cGFnZT0yMSIpIE1vcmVubywgRS4gKDIwMTIpLiBHcmFmb3M6IGZ1bmRhbWVudG9zIHkgYWxnb3JpdG1vcy4gRWRpdG9yaWFsIGVib29rcyBQYXRhZ29uaWEgLSBKLkMuIFPDoWV6IEVkaXRvci4KICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zLm1iLWF1dG8ubXQtMShzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2Jvb2suc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhLnRleHQtc21hbGwudGV4dC1wcmltYXJ5KHRhcmdldD0iX2JsYW5rIiwgaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzY5OTMxP3BhZ2U9MSIpIE1hbmNpbGxhIEhlcnJlcmEsIEEuICgyMDE1KS4gRGlzZcOxbyB5IGNvbnN0cnVjY2nDs24gZGUgYWxnb3JpdG1vcy4gVW5pdmVyc2lkYWQgZGVsIE5vcnRlLgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMubWItYXV0by5tdC0xKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEudGV4dC1zbWFsbC50ZXh0LXByaW1hcnkodGFyZ2V0PSJfYmxhbmsiLCBocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvZXJlYWRlci90ZWNub2xvZ2ljYWRlbG9yaWVudGUvMTA2NTIzP3BhZ2U9MSIpIE5vbGFzY28gVmFsZW56dWVsYSwgSi4gUy4gKDIwMTgpLiBQeXRob246IGFwbGljYWNpb25lcyBwcsOhY3RpY2FzLiBSQS1NQSBFZGl0b3JpYWwuCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMy5tYi1hdXRvLm10LTEoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy95b3V0dWJlLWljb24uc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhLnRleHQtc21hbGwudGV4dC1wcmltYXJ5KHRhcmdldD0iX2JsYW5rIiwgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj10ZjRxTGNLazZaVSIpIExpbnV4Q2hhZC4gKDIwMjMpLiBFbCBvcmlnZW4gZGUgUHl0aG9uIFtWw61kZW9dCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nSW1hZ2VuIGRlIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvJykKCgo="},null]}